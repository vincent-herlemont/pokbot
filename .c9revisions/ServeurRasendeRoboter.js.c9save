{"ts":1381419538138,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var RasendeRoboter = function() {return {\r\n\t  dataPlateau : [ [{g:1, h:1}, {h:1}, {h:1}, {h:1}\t, {h:1}\t, {h:1,d:1}\t, {h:1}\t\t, {h:1}\t, {h:1,d:1}\t, {h:1}\t, {h:1}\t\t, {h:1}\t, {h:1}\t, {h:1}\t\t, {h:1} , {h:1,d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {d:1}\t, {b:1}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {b:1}, {}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {g:1}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {g:1}, {}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {d:1}\t, {h:1}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {b:1,d:1}\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1,b:1}]\r\n\t\t\t\t\t, [{g:1,b:1} , {}\t, {b:1}\t, {}\t, {}\t, {}\t\t, {}\t\t, {d:1}\t, {b:1}\t\t, {}\t, {}\t\t, {}\t, {}\t, {b:1}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {d:1}\t, {b:1}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {d:1}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {d:1}\t\t, {h:1}\t, {h:1,d:1}\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {d:1}\t\t, {b:1}\t, {b:1,d:1}\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {d:1}, {b:1}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {b:1,d:1}\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {d:1}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {d:1}\t\t, {h:1}\t, {}\t\t, {}\t, {}\t\t, {}\t, {h:1}\t, {g:1,b:1}\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1,h:1} , {}\t, {}\t, {}\t, {}\t, {}\t\t, {}\t\t, {}\t, {d:1}\t\t, {h:1}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1,h:1}]\r\n\t\t\t\t\t, [{g:1}\t , {}\t, {}\t, {}\t, {}\t, {b:1,d:1}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t\t, {}\t, {}\t, {}\t\t, {} \t, {d:1}]\r\n\t\t\t\t\t, [{g:1,b:1}, {b:1}\t, {b:1}\t, {b:1}\t, {b:1}\t, {b:1}\t\t, {b:1,d:1}\t, {b:1}\t, {b:1}\t\t, {b:1}\t, {b:1,d:1}\t, {b:1}\t, {b:1}\t, {b:1}\t\t, {b:1} , {d:1,b:1}]\r\n\t\t\t\t\t]\r\n\t, cibles: \t[ {l:1,c:10,t:'red'}\r\n\t\t\t\t, {l:2,c:12,t:'blue'}\r\n\t\t\t\t, {l:3,c:1,t:'red'}\r\n\t\t\t\t, {l:3,c:12,t:'green'}\r\n\t\t\t\t, {l:4,c:6,t:'yellow'}\r\n\t\t\t\t, {l:5,c:8,t:'red'/*'white'*/}\r\n\t\t\t\t, {l:6,c:2,t:'green'}\r\n\t\t\t\t, {l:6,c:3,t:'blue'}\r\n\t\t\t\t, {l:6,c:13,t:'yellow'}\r\n\t\t\t\t, {l:9,c:2,t:'yellow'}\r\n\t\t\t\t, {l:9,c:10,t:'yellow'}\r\n\t\t\t\t, {l:10,c:2,t:'green'}\r\n\t\t\t\t, {l:11,c:7,t:'blue'}\r\n\t\t\t\t, {l:11,c:12,t:'red'}\r\n\t\t\t\t, {l:11,c:13,t:'green'}\r\n\t\t\t\t, {l:13,c:9,t:'blue'}\r\n\t\t\t\t, {l:14,c:5,t:'red'}\r\n\t\t\t\t]\r\n\t, cible\t\t: null\r\n\t, robots\t: []\r\n\t, init: function(idTable) {\r\n\t\t // Choisir une cible au hasard\r\n\t\t this.cible = Math.floor( Math.random()*this.cibles.length );\r\n\t\t // Placer les robots au hasard\r\n\t\t var robots = ['blue', 'red', 'green', 'yellow'];\r\n\t\t for(var i in robots) {\r\n\t\t\t var l = c = 7;\r\n\t\t\t do {\r\n\t\t\t\t l = Math.floor( Math.random()*16 )\r\n\t\t\t\t c = Math.floor( Math.random()*16 );\r\n\t\t\t\t if(l>=7 && l<=8 && c>=7 && c<=8) continue;\r\n\t\t\t\t if( this.cibles[this.cible].l == l\r\n\t\t\t\t   &&this.cibles[this.cible].c == c) continue;\r\n\t\t\t\t var samePlace = false;\r\n\t\t\t\t for(var robot in this.robots) {\r\n\t\t\t\t\t if( this.robots[robot].line   == l\r\n\t\t\t\t\t   &&this.robots[robot].column == c) {samePlace = true; break;}\r\n\t\t\t\t\t}\r\n\t\t\t\t if(!samePlace) {break;}\r\n\t\t\t\t} while(true);\r\n\t\t\t this.robots.push( {color: robots[i], line:l, column:c} );\r\n\t\t\t}\r\n\t\t return this;\r\n\t\t}\r\n\t, getConfiguration\t: function () {\r\n\t\t return { board\t\t: this.dataPlateau\r\n\t\t\t\t, target\t: this.cibles[ this.cible ]\r\n\t\t\t\t, robots\t: this.robots\r\n\t\t\t\t};\r\n\t\t}\r\n\t, NoRobot : function(robots, line, column) {\r\n\t\t for(r in robots) {\r\n\t\t\t if( robots[r].line   == line\r\n\t\t\t   &&robots[r].column == column ) {return false;}\r\n\t\t\t}\r\n\t\t return true;\r\n\t\t}\r\n\t, getNextPositionsFrom: function(robots, line, column) {\r\n\t\t // console.log(\"getNextPositionsFrom \" +line+\" \"+column);\r\n\t\t var nexts = [], l, c;\r\n\t\t // Go left\r\n\t\t l = line; c = column;\r\n\t\t while( this.dataPlateau[l][c].g   == undefined\r\n\t\t      &&this.dataPlateau[l][c-1].d == undefined\r\n\t\t\t  &&this.NoRobot(robots, l, c-1) ) c--;\r\n\t\t if(c != column) {nexts.push({l:line, c:c});}\r\n\t\t // Go right\r\n\t\t l = line; c = column;\r\n\t\t while( this.dataPlateau[l][c].d   == undefined\r\n\t\t      &&this.dataPlateau[l][c+1].g == undefined\r\n\t\t\t  &&this.NoRobot(robots, l, c+1) ) c++;\r\n\t\t if(c != column) {nexts.push({l:line, c:c});}\r\n\t\t // Go top\r\n\t\t l = line; c = column;\r\n\t\t while( this.dataPlateau[l][c].h   == undefined\r\n\t\t      &&this.dataPlateau[l-1][c].b == undefined\r\n\t\t\t  &&this.NoRobot(robots, l-1, c) ) l--;\r\n\t\t if(l != line) {nexts.push({l:l, c:column});}\r\n\t\t // Go down\r\n\t\t l = line; c = column;\r\n\t\t while( this.dataPlateau[l][c].b   == undefined\r\n\t\t      &&this.dataPlateau[l+1][c].h == undefined\r\n\t\t\t  &&this.NoRobot(robots, l+1, c) ) l++;\r\n\t\t if(l != line) {nexts.push({l:l, c:column});}\r\n\t\t // Results\r\n\t\t return nexts;\r\n\t\t}\r\n\t, isAmong: function(position, positions) {\r\n\t\t for(var p in positions) {\r\n\t\t\t if( position.l == positions[p].l\r\n\t\t\t   &&position.c == positions[p].c ) {return true;}\r\n\t\t\t}\r\n\t\t return false;\r\n\t\t}\r\n\t, ProcessProposition : function(proposition) {\r\n\t\t var state = '', details = ''\r\n\t\t   , nextPositions = [];\r\n\t\t // state : {INVALID_EMPTY, INVALID_SELECT, INVALID_MOVE, INCOMPLETE, SUCCESS}\r\n\t\t // nextPositions : list of possible next positions for the last moved robots\r\n\t\t // Copy robot positions\r\n\t\t var P = {}\r\n\t\t   , currentRobot = null;\r\n\t\t for(var r in this.robots) {P[this.robots[r].color] = {line: this.robots[r].line, column: this.robots[r].column, color: this.robots[r].color};}\r\n\t\t // Go through the proposition\r\n\t\t for(var i=0; i<proposition.length && state==''; i++) {\r\n\t\t\t switch(proposition[i].command) {\r\n\t\t\t\t case 'select':\r\n\t\t\t\t\tif(P[ proposition[i].robot ] == undefined) {throw new Error({error: 'INVALID_ROBOT', detail: proposition[i].robot+' is not a robot, should be blue, red, yellow or green'});}\r\n\t\t\t\t\tif(P[ proposition[i].robot ].selected && currentRobot != P[ proposition[i].robot ]) {\r\n\t\t\t\t\t\t state = \"INVALID_SELECT\"; details = 'You can not move again a robot after having released it'; break;\r\n\t\t\t\t\t\t} else \t{currentRobot = P[proposition[i].robot];\r\n\t\t\t\t\t\t\t\t currentRobot.selected = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t break;\r\n\t\t\t\t case 'move':\r\n\t\t\t\t\tif(currentRobot == null) {state = 'INVALID_MOVE'; details = 'You have to select a robot before move'; break;}\r\n\t\t\t\t\tvar nexts = this.getNextPositionsFrom(P, currentRobot.line, currentRobot.column);\r\n\t\t\t\t\tif(this.isAmong({l:proposition[i].line, c:proposition[i].column}, nexts)) {\r\n\t\t\t\t\t\t currentRobot.line \t = proposition[i].line;\r\n\t\t\t\t\t\t currentRobot.column = proposition[i].column;\r\n\t\t\t\t\t\t} else\t{state   = 'INVALID_MOVE';\r\n\t\t\t\t\t\t\t\t details = 'Robot must move along a column or a line until it meet another robot or a wall.';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t break;\r\n\t\t\t\t default:\r\n\t\t\t\t\tvar details = 'Invalide command at index ' + i + ' of the proposition : ' + proposition[i].command + \"\\n\\tShould be 'select' or 'move' as a value of 'command' attribute.\";\r\n\t\t\t\t\tthrow new Error({error: 'INVALID_SUBCOMMAND', detail: details});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t if(currentRobot == null) {state = 'INVALID_EMPTY'; details = 'A proposition can not be empty';}\r\n\t\t if(state == '') { // Proposition is valid. If incomplete then send back next possible movement for last selected robot\r\n\t\t\t // console.log(\"Cible et robot\");\r\n\t\t\t // console.log(\"\\t\"+currentRobot.color+' == '+this.cibles[ this.cible ].t);\r\n\t\t\t // console.log(\"\\t\"+currentRobot.line  == this.cibles[ this.cible ].l\r\n\t\t\t // console.log(\"\\t\"+\r\n\t\t\t if( currentRobot.color == this.cibles[ this.cible ].t\r\n\t\t\t   &&currentRobot.line  == this.cibles[ this.cible ].l\r\n\t\t\t   &&currentRobot.column == this.cibles[ this.cible ].c ) {\r\n\t\t\t\t\t state = 'SUCCESS';\r\n\t\t\t\t\t \r\n\t\t\t\t\t} else \t{state = 'INCOMPLETE';\r\n\t\t\t\t\t\t\t nextPositions = this.getNextPositionsFrom(P, currentRobot.line, currentRobot.column);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t return {state: state, details: details, nextPositions: nextPositions};\r\n\t\t}\r\n};\r\n};\r\n\r\n\r\nvar RRServer = {\r\n\t  fs\t\t: require('fs')\r\n\t, express\t: require('express')\r\n\t, app\t\t: null\r\n\t, io\t\t: require('socket.io')\r\n\t, games\t\t: { list\t: {}\r\n\t\t\t\t  , ProcessProposition : function(idGame, playerName, proposition) {\r\n\t\t\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID' );}\r\n\t\t\t\t\t\t\t\t if(this.list[idGame].participants[playerName] == undefined) {throw new Error( 'PLAYER_IS_NOT_PRESENT' );}\r\n\t\t\t\t\t\t\t\t if(this.list[idGame].Terminated) {return {state: 'TOO_LATE', details: 'The game is over...', nextPositions:[]};}\r\n\t\t\t\t\t\t\t\t var answer = this.list[idGame].game.ProcessProposition( proposition );\r\n\t\t\t\t\t\t\t\t if(answer.state == 'SUCCESS') {\r\n\t\t\t\t\t\t\t\t\t if(this.list[idGame].finalCountDown) {\r\n\t\t\t\t\t\t\t\t\t\t RRServer.games.OtherFinalProposition(idGame, playerName, proposition);\r\n\t\t\t\t\t\t\t\t\t\t} else\t{RRServer.games.FinalCountDown(idGame, playerName, proposition);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t return answer;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , new\t\t: function(id)\t{//console.log('Opening game ' + id);\r\n\t\t\t\t\t\t\t\t if(this.list[id]) {throw new Error( 'NOT_UNIQUE_ID');}\r\n\t\t\t\t\t\t\t\t this.list[id] = {ms: 60000, participants:{}, propositions:[], game: (new RasendeRoboter()).init()}\r\n\t\t\t\t\t\t\t\t setTimeout( function() {RRServer.games.checkParticipants(id);}, 5000);\r\n\t\t\t\t\t\t\t\t RRServer.sendGamesInfo();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , close\t: function(id)\t{//console.log('Closing game ' + id);\r\n\t\t\t\t\t\t\t\t if(this.list[id] == undefined) {throw new Error( 'NO_SUCH_GAME_ID');}\r\n\t\t\t\t\t\t\t\t delete this.list[id];\r\n\t\t\t\t\t\t\t\t RRServer.sendGamesInfo();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , joining\t: function(idGame, playerName) {\r\n\t\t\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID' );}\r\n\t\t\t\t\t\t\t\t if(this.list[idGame].participants[playerName] == undefined) {\r\n\t\t\t\t\t\t\t\t\t //console.log(\"\\tParticipant \" + playerName + ' is joining game ' + idGame);\r\n\t\t\t\t\t\t\t\t\t this.list[idGame].participants[playerName] = {name:playerName, sockets: new Array()};\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , leaving\t: function(idGame, playerName) {\r\n\t\t\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID' );}\r\n\t\t\t\t\t\t\t\t if(this.list[idGame].participants[playerName] == undefined) {throw new Error( 'PLAYER_IS_NOT_PRESENT' );}\r\n\t\t\t\t\t\t\t\t //console.log(\"\\tPlayer \" + playerName + ' is leaving game ' + idGame);\r\n\t\t\t\t\t\t\t\t delete this.list[idGame].participants[playerName];\r\n\t\t\t\t\t\t\t\t this.sendListOfParticipants(idGame);\r\n\t\t\t\t\t\t\t\t setTimeout( function() {RRServer.games.checkParticipants(idGame);}, 5000);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , checkParticipants : function(idGame) {//console.log(\"\\tcheckParticipants\");\r\n\t\t\t\t\t\t\t\t if(this.list[idGame] == undefined) {return;}\r\n\t\t\t\t\t\t\t\t var nb=0; \r\n\t\t\t\t\t\t\t\t for(i in this.list[idGame].participants) {\r\n\t\t\t\t\t\t\t\t\t //console.log(\"\\t\\tConsidering participant \" + i + ' with ' + this.list[idGame].participants[i].sockets.length + ' sockets');\r\n\t\t\t\t\t\t\t\t\t if(this.list[idGame].participants[i].sockets.length > 0) {nb++;}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t if(nb==0) {this.close(idGame);}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , identification\t: function(idGame, playerName, socket) {\r\n\t\t\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID' );}\r\n\t\t\t\t\t\t\t\t if(this.list[idGame].participants[playerName] == undefined) {\r\n\t\t\t\t\t\t\t\t\t this.joining(idGame, playerName);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t //console.log(\"\\tParticipant \" + playerName + \" is connected on game \" + idGame + \" using socket \" + socket.id);\r\n\t\t\t\t\t\t\t\t this.list[idGame].participants[playerName].sockets.push(socket);\r\n\t\t\t\t\t\t\t\t this.sendListOfParticipants(idGame);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , disconnect\t: function(socket) {\r\n\t\t\t\t\t\t\t\t for(var idGame in this.list) {\r\n\t\t\t\t\t\t\t\t\t for(var playerName in this.list[idGame].participants) {\r\n\t\t\t\t\t\t\t\t\t\t var i = this.list[idGame].participants[playerName].sockets.indexOf(socket);\r\n\t\t\t\t\t\t\t\t\t\t if(i >= 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t this.list[idGame].participants[playerName].sockets.splice(i, 1);\r\n\t\t\t\t\t\t\t\t\t\t\t if(this.list[idGame].participants[playerName].sockets.length == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t this.leaving(idGame, playerName);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , emit: function(idGame, variable, value, targets) {\r\n\t\t\t\t\t\t\t\t targets = targets || this.list[idGame].participants;\r\n\t\t\t\t\t\t\t\t // Inform all participants that the list of participants has changed\r\n\t\t\t\t\t\t\t\t for(var p in targets) {\r\n\t\t\t\t\t\t\t\t\t for(var sock in this.list[idGame].participants[p].sockets) {\r\n\t\t\t\t\t\t\t\t\t\t this.list[idGame].participants[p].sockets[sock].emit(variable, value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , sendListOfParticipants: function(idGame) {\r\n\t\t\t\t\t\t\t\t // List all participants\r\n\t\t\t\t\t\t\t\t var participants = [];\r\n\t\t\t\t\t\t\t\t for (var p in this.list[idGame].participants) {participants.push( p );}\r\n\t\t\t\t\t\t\t\t this.emit(idGame, 'participants', {participants: participants});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t  , FinalCountDown: function(idGame, playerName, proposition) {\r\n\t\t\t\t\t\t this.list[idGame].finalCountDown = true;\r\n\t\t\t\t\t\t this.list[idGame].solutions = [];\r\n\t\t\t\t\t\t var ms = this.list[idGame].ms;\r\n\t\t\t\t\t\t this.emit(idGame, 'FinalCountDown', {FinalCountDown: ms});\r\n\t\t\t\t\t\t this.OtherFinalProposition(idGame, playerName, proposition);\r\n\t\t\t\t\t\t setTimeout\t( function() {RRServer.games.TerminateGame(idGame);}\r\n\t\t\t\t\t\t\t\t\t, ms );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  , OtherFinalProposition: function(idGame, playerName, proposition) {\r\n\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID');}\r\n\t\t\t\t\t\t this.list[idGame].solutions.push( {player: playerName, proposition: proposition} );\r\n\t\t\t\t\t\t this.emit(idGame, 'solutions', {solutions: this.list[idGame].solutions});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  , TerminateGame: function(idGame) {\r\n\t\t\t\t\t\t if(this.list[idGame] == undefined) {throw new Error( 'NO_SUCH_GAME_ID');}\r\n\t\t\t\t\t\t this.emit(idGame, 'TerminateGame', {TerminateGame: true});\r\n\t\t\t\t\t\t this.list[idGame].Terminated = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  }\r\n\t, sockets\t: [] // Sockets connected to the loggin page\r\n\t, connect\t: function(socket) {//console.log(\"Connection on loggin page of \" + socket.id);\r\n\t\t if(this.sockets.indexOf(socket) < 0) {\r\n\t\t\t this.sockets.push( socket );\r\n\t\t\t}\r\n\t\t this.sendGamesInfo( [socket] );\r\n\t\t}\r\n\t, disconnect: function(socket) {//console.log(\"Disonnection of loggin page of \" + socket.id);\r\n\t\t var i = this.sockets.indexOf(socket);\r\n\t\t if(i >= 0) {\r\n\t\t\t this.sockets.splice(i, 1);\r\n\t\t\t}\r\n\t\t this.games.disconnect(socket);\r\n\t\t}\r\n\t, sendGamesInfo\t: function(sockets) {//console.log(\"--> Sending game informations\");\r\n\t\t sockets = sockets || this.sockets;\r\n\t\t // Build the game list\r\n\t\t var gamesList = [];\r\n\t\t for(var g in this.games.list) {gamesList.push(g);}\r\n\t\t // Send it to all connected login pages\r\n\t\t for(var i in sockets) {\r\n\t\t\t sockets[i].emit( 'gamesList', {gamesList: gamesList});\r\n\t\t\t}\r\n\t\t}\r\n\t, init\t\t: function(port) {\r\n\t\t this.app\t= this.express().use(this.express.static(__dirname))\r\n\t\t\t\t\t\t\t\t\t.use(this.express.bodyParser())\r\n\t\t\t\t\t\t\t\t\t.get('/', function(req, res) {\r\n\t\t\t\t\t\t\t\t\t\tRRServer.fs.readFile(__dirname + '/login.xhtml',\r\n\t\t\t\t\t\t\t\t\t\t\t\t  function (err, data) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (err) {res.writeHead(500);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  return res.end('Error loading login.xhtml'); }\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tres.writeHead(200, {'Content-Type': 'application/xhtml+xml; charset=utf-8'});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tres.end(data);\r\n\t\t\t\t\t\t\t\t\t\t\t\t  });\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t.post('/', function(req, res) {\r\n\t\t\t\t\t\t\t\t\t\t// POST VARIABLES :\r\n\t\t\t\t\t\t\t\t\t\t//\t- login\r\n\t\t\t\t\t\t\t\t\t\t//\t- idGame\r\n\t\t\t\t\t\t\t\t\t\t\t\t// Create or join the idGame\r\n\t\t\t\t\t\t\t\t\t\ttry {RRServer.games.joining(req.body.idGame, req.body.login);\r\n\t\t\t\t\t\t\t\t\t\t\t} catch(err) {switch(err.message) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t case 'NO_SUCH_GAME_ID':\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRRServer.games.new(req.body.idGame);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRRServer.games.joining(req.body.idGame, req.body.login);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t case 'PLAYER_ALREADY_PRESENT':\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres.writeHead(500);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn res.end('Player '+req.body.login+' is already logged into game '+req.body.idGame+'...');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Error while joining game:\\n\" + err);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t }\r\n\t\t\t\t\t\t\t\t\t\tRRServer.fs.readFile(__dirname + '/logged.xhtml',\r\n\t\t\t\t\t\t\t\t\t\t\tfunction (err, data) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (err) {res.writeHead(500);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  return res.end('Error loading logged.xhtml');}\r\n\t\t\t\t\t\t\t\t\t\t\t\tres.writeHead(200, {'Content-Type': 'application/xhtml+xml; charset=utf-8'});\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar title = req.body.idGame\r\n\t\t\t\t\t\t\t\t\t\t\t\t  , state = '';\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(RRServer.games.list[req.body.idGame].Terminated) {state += ' est terminée';}\r\n\t\t\t\t\t\t\t\t\t\t\t\tres.write( data.toString().replace(/__LOGIN__/g\t, req.body.login)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(/__IDGAME__/g, title)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .replace(/__STATE__/g, state)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t );\r\n\t\t\t\t\t\t\t\t\t\t\t\tres.end();\r\n\t\t\t\t\t\t\t\t\t\t\t  });\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t.use(function(req, res) {\r\n\t\t\t\t\t\t\t\t\t\t if(req.method == \"GET\") {\r\n\t\t\t\t\t\t\t\t\t\t\t // Is there a game with that URL ?\r\n\t\t\t\t\t\t\t\t\t\t\t var idGame = req.url.slice(1);\r\n\t\t\t\t\t\t\t\t\t\t\t if( RRServer.games.list[ idGame ] ) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t res.writeHead(200, {'Content-Type': 'application/json'});\r\n\t\t\t\t\t\t\t\t\t\t\t\t res.end( JSON.stringify( RRServer.games.list[ idGame ].game.getConfiguration() ) );\r\n\t\t\t\t\t\t\t\t\t\t\t\t return;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t res.writeHead(404);\r\n\t\t\t\t\t\t\t\t\t\t\t res.write('Ressource does not exists, should be one of : ');\r\n\t\t\t\t\t\t\t\t\t\t\t for(var game in RRServer.games.list) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t res.write( game + ' ');\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t res.end('.');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t if(req.method == \"POST\") {\r\n\t\t\t\t\t\t\t\t\t\t\t // Is it a proposition of solution?\r\n\t\t\t\t\t\t\t\t\t\t\t var REST_command = req.url.slice(1);\r\n\t\t\t\t\t\t\t\t\t\t\t // console.log(\"Receiving a proposition :\");\r\n\t\t\t\t\t\t\t\t\t\t\t switch(REST_command) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t case 'proposition':\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar answer = null;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// for(var i in req.body) {console.log(\"\\t\"+i+' : '+req.body[i]);}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttry {answer = RRServer.games.ProcessProposition( req.body.idGame\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   , req.body.login\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   , JSON.parse( req.body.proposition ) );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcatch(err) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t switch(err.message) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t case 'NO_SUCH_GAME_ID':\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRRServer.games.new(req.body.idGame);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRRServer.games.joining(req.body.idGame, req.body.login);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t case 'PLAYER_IS_NOT_PRESENT':\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRRServer.games.joining(req.body.idGame, req.body.login);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t default:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.error(\"Error while processing proposition :\\n\" + err.detail );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres.writeHead(400);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tres.end( JSON.stringify(err.detail) );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t answer = RRServer.games.ProcessProposition( req.body.idGame\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   , req.body.login\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   , JSON.parse( req.body.proposition ) );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tres.writeHead(200, {'Content-Type': 'application/json'});\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// console.log( 'coucou' );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// console.log( \"Send answer : \" + JSON.stringify( answer ));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tres.end( JSON.stringify( answer ) );\r\n\t\t\t\t\t\t\t\t\t\t\t\t break;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t.listen(port) ;\r\n\t\t this.io\t= this.io.listen( this.app, { log: false } );\r\n\t\t // assuming io is the Socket.IO server object\r\n\t\t /*this.io.configure(function () { \r\n\t\t\t RRServer.io.set(\"transports\", [\"xhr-polling\"]); \r\n\t\t\t RRServer.io.set(\"polling duration\", 10); \r\n\t\t\t});*/\r\n\r\n\t\t this.io.on\t('connection', function (socket) {\r\n\t\t\t\t\t\t\t\t\t\t  socket.on\t( 'loginPage'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t, function(data) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t //console.log(\"Someone is connected on the loggin page...\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t RRServer.connect( socket );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t  socket.on\t( 'identification'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t, function(data) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t // console.log('Received identification ' + JSON.stringify(data));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t RRServer.games.identification(data.idGame, data.login, socket);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t  socket.on\t( 'disconnect'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t, function() {RRServer.disconnect( socket );}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t}\r\n};\r\n\r\nvar port = process.env.PORT || 8090;\r\nconsole.log(\"Listening on port \" + port);\r\nRRServer.init( port );\r\n\r\n/*\r\nio.sockets.on('connection', function (socket) {\r\n\tsocket.emit('news', { hello: 'world' });\r\n\tsocket.on('my other event', function (data) {\r\n\t\t console.log(data);\r\n\t\t});\r\n\t});\r\n*/\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":20337}]],"length":20337}
